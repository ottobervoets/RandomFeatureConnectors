? if adding noise to the reservoir state, the starting "location" is also disturbed a bit. do we want to correct for this?



? conceptors to prune

?no defintion of quota, but sum of eigenvalues and then compared with dimention of the reservoir

? how to interpert the storage capacity

TODO:
- Optimize for different settings.
- Run optimized settings n times.
- Update github + spheer mailen
- Implement visualization for the conceptor weights/weight


Reservoir size:
N = 100, M = 500 already gives consistently good results for optimized settings. Since apperture (CHECK) takes more storage we do this reservoir size times 2.5, leading to a size of 250. Note that a reservoir of 50 also already performs reasonably well, however, there is more "tracking".

N = 250

M = 100 => bad results
M = 125 => 1/2 * N
M = 187 => 3/4 * N
M = 250 => N
M = 312 => 5/4 N
M = 375 => 3/2 N
M = 500 => 2N
M = 750 => 3N
M = 1000 => 4N
M = 1250 => 5N


==============
Uitzoeken waarom er sommige jobs niet gefinished zijn.
Iets maken dat de beste settings straks gerund kunnen worden en resultaten gereport.
platjes alvast opslaan


====
Verloop van variabelen over verschillende M. ipv scatter plot per variabele

=====
Stability: Max noise added to network (steps of x5)


-Optimize also with beta

====
noise toevoegen

M = 1000 0.01
M = 750 0.01
M = 500 0.01
M = 375 0.01
M = 312 0.005
M = 250 0.005
M = 187 0.000001
M = 125 => not stable
M = 100 => not stable


=====
Questions:
line 31: net connectivity 10/netsize => netsize of 500 implies 10/500 = 0.02 connectivity.
line 69: xCollectorsCentered = cell(1,Np)
line 95: 0.5*(u(1)+1)
typo resevoir size and matrix sizes.

Washout length increase



n_harvest = 2000
    washout = 500
    beta_W_out = 5
    beta_G = 0.1
    beta_D = 0.07
    aperture = 300
    spectral_radius = 0.8
    N = 500
    M = 250
    n_adapt = 2000
    W_sr = 0.5
    W_sparseness = 0.2
    d_dim = "reservoir_dim"
    F_method = "white_noise"  # random, white_noise, patter
    G_method = "W_F"  # random, F, W_F, W_G_tilde

    patterns = {}
    patterns["rossler_attractor"] = rossler_attractor(total_time=3000)
    # patterns["lorenz_attractor"] = lorenz_attractor(total_time=3000)
    # patterns["mackey_glass"] = mackey_glass(total_time=3000)
    # patterns["henon_attractor"] = henon_attractor(total_time=3000)
    kwargs = {}
    kwargs["aperture_rossler_attractor"] = 700
    kwargs["aperture_lorenz_attractor"] = 1000
    kwargs["aperture_mackey_glass"] = 150
    kwargs["aperture_henon_attractor"] = 20

    kwargs['training_patterns'] = patterns
    kwargs['noise_std'] = 0.1 #default = 0.001
    kwargs['max_n_features'] = N
    kwargs['washout'] = washout
    kwargs['n_adapt'] = n_adapt


==========

lorenz 0.0015
default_parmas_chaotic = {
    'n_harvest': 2000,
    'washout': 500,
    'beta_W_out': 0.01,
    'beta_G': 0.5,
    'beta_D': 0.0001,
    'aperture_rossler_attractor': 7000,
    'aperture_lorenz_attractor': 600,
    'aperture_mackey_glass': 150,
    'aperture_henon_attractor': 20,
    'spectral_radius': 1,
    'N': 500,
    'M': 500,
    'n_adapt': 2000,
    'W_sparseness': 0.1,
    'd_dim': "reservoir_dim",
    'F_method': "patterns",
    'signal_dim': 2,
    'G_method': "W_F",
    'noise_mean': None,
    'noise_std': 0.0001,
    'rfc_type': 'PCARFC',
    'max_n_features': 750,
    'verbose': False

}